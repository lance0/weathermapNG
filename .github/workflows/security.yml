name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        extensions: pdo, pdo_mysql, pdo_sqlite, gd, json, mbstring

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run Composer Security Audit
      run: composer audit --no-interaction --format=plain || true

    - name: Run PHP Security Checker
      uses: StephaneBour/actions-php-security-checker@v1
      with:
        composer-lock: ./composer.lock

    - name: Check for sensitive data
      run: |
        # Check for API keys, passwords, etc.
        sensitive_patterns=(
          "password.*="
          "api_key.*="
          "secret.*="
          "token.*="
          "key.*="
          "\.env"
          "config.*database"
        )

        found_sensitive=false
        for pattern in "${sensitive_patterns[@]}"; do
          if grep -r -i "$pattern" . --exclude-dir=.git --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.github | grep -v "composer.json" | grep -v "README.md" | grep -v "CHANGELOG.md"; then
            echo "‚ö†Ô∏è  Potential sensitive data found with pattern: $pattern"
            found_sensitive=true
          fi
        done

        if [ "$found_sensitive" = true ]; then
          echo "Please review the above findings and ensure no sensitive data is committed."
        else
          echo "‚úÖ No obvious sensitive data found in committed files."
        fi

    - name: Check file permissions
      run: |
        # Check for world-writable files
        if find . -type f -perm /o+w -not -path "./.git/*" -not -path "./vendor/*" | grep -v ".github"; then
          echo "‚ö†Ô∏è  Found world-writable files:"
          find . -type f -perm /o+w -not -path "./.git/*" -not -path "./vendor/*" | grep -v ".github"
          echo "Consider reviewing file permissions."
        else
          echo "‚úÖ No world-writable files found."
        fi

    - name: Check for debug code
      run: |
        debug_patterns=(
          "var_dump("
          "print_r("
          "die("
          "exit("
          "dd("
          "dump("
          "console.log("
          "alert("
        )

        found_debug=false
        for pattern in "${debug_patterns[@]}"; do
          if grep -r "$pattern" . --exclude-dir=.git --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.github --exclude-dir=tests | head -10; then
            echo "‚ö†Ô∏è  Debug code found with pattern: $pattern"
            found_debug=true
          fi
        done

        if [ "$found_debug" = true ]; then
          echo "Please review and remove debug code before production deployment."
        else
          echo "‚úÖ No obvious debug code found."
        fi

    - name: Validate HTTPS URLs
      run: |
        # Check for HTTP URLs that should be HTTPS
        http_urls=$(grep -r "http://" . --exclude-dir=.git --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.github | grep -v "localhost" | wc -l)

        if [ "$http_urls" -gt 0 ]; then
          echo "‚ö†Ô∏è  Found $http_urls HTTP URLs. Consider using HTTPS where possible."
          grep -r "http://" . --exclude-dir=.git --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.github | grep -v "localhost" | head -5
        else
          echo "‚úÖ No HTTP URLs found (excluding localhost)."
        fi

    - name: Check for TODO/FIXME comments
      run: |
        todo_count=$(grep -r -i "TODO\|FIXME\|XXX\|HACK" . --exclude-dir=.git --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.github | wc -l)

        if [ "$todo_count" -gt 0 ]; then
          echo "üìù Found $todo_count TODO/FIXME comments:"
          grep -r -i "TODO\|FIXME\|XXX\|HACK" . --exclude-dir=.git --exclude-dir=vendor --exclude-dir=node_modules --exclude-dir=.github | head -10
          echo "Consider addressing these before production."
        else
          echo "‚úÖ No TODO/FIXME comments found."
        fi

    - name: Security Headers Check
      run: |
        # This would check for security headers in production
        # For now, just validate the structure
        if [ -f "WeathermapNG.php" ]; then
          echo "‚úÖ Main plugin file exists"
        else
          echo "‚ùå Main plugin file missing"
          exit 1
        fi

        if [ -f "composer.json" ]; then
          echo "‚úÖ Composer configuration exists"
        else
          echo "‚ùå Composer configuration missing"
          exit 1
        fi