name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/docs.yml'

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Lint markdown files
      run: |
        find . -name "*.md" -not -path "./vendor/*" -not -path "./node_modules/*" | xargs markdownlint

    - name: Check documentation links
      run: |
        # Check for broken relative links in markdown
        find . -name "*.md" -not -path "./vendor/*" -exec sh -c '
          file="$1"
          echo "Checking links in $file"
          # Extract markdown links and check if files exist
          grep -o "\[.*\](\([^)]*\))" "$file" | while read -r link; do
            # Extract the path from markdown link
            path=$(echo "$link" | sed "s/.*](\([^)]*\)).*/\1/")
            # Skip external URLs
            if [[ "$path" == http* ]] || [[ "$path" == //* ]]; then
              continue
            fi
            # Check if relative path exists
            if [[ "$path" == /* ]]; then
              if [ ! -f "$path" ] && [ ! -d "$path" ]; then
                echo "Broken link in $file: $path"
              fi
            else
              dir=$(dirname "$file")
              if [ ! -f "$dir/$path" ] && [ ! -d "$dir/$path" ]; then
                echo "Broken relative link in $file: $path"
              fi
            fi
          done
        ' _ {} \;

    - name: Validate documentation structure
      run: |
        # Check for required documentation files
        required_docs=("README.md" "CHANGELOG.md" "CONTRIBUTING.md")
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Required documentation missing: $doc"
            exit 1
          fi
        done

        # Check documentation has proper headers
        for doc in "${required_docs[@]}"; do
          if ! head -5 "$doc" | grep -q "^# "; then
            echo "⚠️  $doc missing proper title header"
          fi
        done

        echo "✅ Documentation structure validation passed"

    - name: Check code examples in documentation
      run: |
        # Extract code blocks from README and validate basic syntax
        echo "Checking code examples in README.md..."

        # Extract bash code blocks and check for obvious syntax errors
        awk '/^```bash$/{found=1; line=NR; content=""; next}
             /^```$/{if(found){print "Bash block at line " line ":"; print content; print "---"} found=0}
             found{content = content "\n" $0}' README.md | head -20

        echo "✅ Code example extraction completed"